from pyrogram import Client, filters, types
from pyrogram.errors.exceptions.bad_request_400 import UserAdminInvalid, BadRequest
from pyrogram.enums import ChatMemberStatus
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, timedelta
import asyncio
import configparser as cp
from crud import *
import threading
import time


#  ________  _________  ________  ________  _________   
# |\   ____\|\___   ___\\   __  \|\   __  \|\___   ___\ 
# \ \  \___|\|___ \  \_\ \  \|\  \ \  \|\  \|___ \  \_| 
#  \ \_____  \   \ \  \ \ \   __  \ \   _  _\   \ \  \  
#   \|____|\  \   \ \  \ \ \  \ \  \ \  \\  \|   \ \  \ 
#     ____\_\  \   \ \__\ \ \__\ \__\ \__\\ _\    \ \__\
#    |\_________\   \|__|  \|__|\|__|\|__|\|__|    \|__|
#    \|_________|                                                 
cfg = cp.ConfigParser()
cfg.read('config.ini')
print('Config Readed')
token_bot = cfg.get('API_KEYS', 'tokenBot')
api_hash = cfg.get('API_KEYS', 'apiHash')
api_id = int(cfg.get('API_KEYS', 'apiId'))
app = Client("my_bot", api_id=api_id, api_hash=api_hash, bot_token=token_bot)


#  ________  ________  ________   ________ ___  ________     
# |\   ____\|\   __  \|\   ___  \|\  _____\\  \|\   ____\    
# \ \  \___|\ \  \|\  \ \  \\ \  \ \  \__/\ \  \ \  \___|    
#  \ \  \    \ \  \\\  \ \  \\ \  \ \   __\\ \  \ \  \  ___  
#   \ \  \____\ \  \\\  \ \  \\ \  \ \  \_| \ \  \ \  \|\  \ 
#    \ \_______\ \_______\ \__\\ \__\ \__\   \ \__\ \_______\
#     \|_______|\|_______|\|__| \|__|\|__|    \|__|\|_______|                                          
mute_delay = int(cfg.get('SETTING', 'mute_delay'))
sticker_spam = {}
gif_spam = {}
global_cfg = {}
rules = cfg.get('SETTING', 'rule_link')


# ________      ___    ___ ________  ___       _______   ________      
#|\   ____\    |\  \  /  /|\   ____\|\  \     |\  ___ \ |\   ____\     
#\ \  \___|    \ \  \/  / | \  \___|\ \  \    \ \   __/|\ \  \___|_    
# \ \  \        \ \    / / \ \  \    \ \  \    \ \  \_|/_\ \_____  \   
#  \ \  \____    \/  /  /   \ \  \____\ \  \____\ \  \_|\ \|____|\  \  
#   \ \_______\__/  / /      \ \_______\ \_______\ \_______\____\_\  \ 
#    \|_______|\___/ /        \|_______|\|_______|\|_______|\_________\
#             \|___|/                                      \|_________|                                                                                                      
@app.on_message(filters.sticker & filters.group)
async def handle_sticker(client, msg):
    await handle_media_spam(client, msg, sticker_spam, "—Å—Ç–∏–∫–µ—Ä–æ–≤")

@app.on_message(filters.animation & filters.group)
async def handle_gif(client, msg):
    await handle_media_spam(client, msg, gif_spam, "–≥–∏—Ñ–æ–∫")


#  ________ ___  ___  ________   ________ _________  ___  ________  ________   ________      
# |\  _____\\  \|\  \|\   ___  \|\   ____\\___   ___\\  \|\   __  \|\   ___  \|\   ____\     
# \ \  \__/\ \  \\\  \ \  \\ \  \ \  \___\|___ \  \_\ \  \ \  \|\  \ \  \\ \  \ \  \___|_    
#  \ \   __\\ \  \\\  \ \  \\ \  \ \  \       \ \  \ \ \  \ \  \\\  \ \  \\ \  \ \_____  \   
#   \ \  \_| \ \  \\\  \ \  \\ \  \ \  \____   \ \  \ \ \  \ \  \\\  \ \  \\ \  \|____|\  \  
#    \ \__\   \ \_______\ \__\\ \__\ \_______\  \ \__\ \ \__\ \_______\ \__\\ \__\____\_\  \ 
#     \|__|    \|_______|\|__| \|__|\|_______|   \|__|  \|__|\|_______|\|__| \|__|\_________\
#                                                                                \|_________|
    
#—Å–ø–∞–º —Ç—Ä–∏–≥–≥–µ—Ä
async def handle_media_spam(client, msg, spam_dict, media_type):
    user_id = msg.from_user.id
    if user_id in spam_dict:
        spam_dict[user_id] += 1
    else:
        spam_dict[user_id] = 1
    if spam_dict[user_id] > 4:
        try:
            until_date = (datetime.now() + timedelta(seconds=mute_delay)).replace(microsecond=0)
            await client.restrict_chat_member(msg.chat.id, user_id, permissions=types.ChatPermissions(), until_date=until_date)
            await msg.reply(f"–í–∞—à–∞ –ø–æ–∫–æ—Ä–Ω–æ—Å—Ç—å –ø–æ—Ä–∞–∑–∏–ª–∞ –Ω–∞—Å. –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ {media_type} –∑–∞ —Ä–∞–∑ –∏ –≤–∞–º –ø—Ä–∏–¥–µ—Ç—Å—è –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –Ω–∞ {mute_delay//60} –º–∏–Ω—É—Ç")
            spam_dict[user_id] = 1
        except:
            await msg.reply("–¢–≤–æ–∏ –∞–¥–º–∏–Ω—Å–∫–∏–µ –∏–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ –ø—Ä–∞–≤–∞ –Ω–µ –æ–ø—Ä–∞–≤–¥—ã–≤–∞—é—Ç —Å–ø–∞–º!!! üôÖ‚Äç‚ôÇÔ∏è")
            spam_dict[user_id] = 1
    await asyncio.sleep(1)

def clear_spam():
    while True:
        for us, _ in gif_spam.items():
            gif_spam[us] = 1
        for us, _ in sticker_spam.items():
            sticker_spam[us] = 1
        time.sleep(2)

# –≥—Ä–∞–¥–∞—Ü–∏—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –º—É—Ç–∞ –∑–∞ —Å–ø–∞–º
async def nmap(decimal):
    gradations = {
        0.1: 300,
        0.5: 1800,
        0.9: 40000
        # –î–æ–±–∞–≤—å—Ç–µ –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    }
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –≥—Ä–∞–¥–∞—Ü–∏–π –ø–æ –∫–ª—é—á–∞–º (–¥–µ—Å—è—Ç–∏—á–Ω—ã–º —á–∏—Å–ª–∞–º)
    sorted_gradations = sorted(gradations.items())
    
    # –ï—Å–ª–∏ –¥–µ—Å—è—Ç–∏—á–Ω–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ –ø–µ—Ä–≤–æ–≥–æ –≤ –∫–∞—Ä—Ç–µ –≥—Ä–∞–¥–∞—Ü–∏–π,
    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∫–ª—é—á–∞
    if decimal < sorted_gradations[0][0]:
        return sorted_gradations[0][1]
    
    # –ï—Å–ª–∏ –¥–µ—Å—è—Ç–∏—á–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤ –∫–∞—Ä—Ç–µ –≥—Ä–∞–¥–∞—Ü–∏–π,
    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–ª—é—á–∞
    if decimal > sorted_gradations[-1][0]:
        return sorted_gradations[-1][1]
    
    # –ò–Ω–∞—á–µ –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞—Ä—Ç–µ –≥—Ä–∞–¥–∞—Ü–∏–π –∏ –Ω–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
    for i in range(len(sorted_gradations) - 1):
        if sorted_gradations[i][0] <= decimal < sorted_gradations[i+1][0]:
            # –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º –º–µ–∂–¥—É –¥–≤—É–º—è –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –≤ –∫–∞—Ä—Ç–µ –≥—Ä–∞–¥–∞—Ü–∏–π
            fraction = (decimal - sorted_gradations[i][0]) / (sorted_gradations[i+1][0] - sorted_gradations[i][0])
            return int(sorted_gradations[i][1] + fraction * (sorted_gradations[i+1][1] - sorted_gradations[i][1]))

# —Ä–µ—Ñ–∞–∫—Ç–æ—Ä –¥–∞—Ç—ã
async def ref_date(date_string):
    date_formats = [
        "%d-%m-%Y", "%d/%m/%Y", "%d.%m.%Y",
        "%Y-%m-%d", "%Y/%m/%d", "%Y.%m.%d",
        "%d %b %Y", "%d %B %Y",
        "%b %d %Y", "%B %d %Y",
        "%d %b %y", "%d %B %y",
        "%b %d %y", "%B %d %y"
    ]

    formatted_date = None
    for date_format in date_formats:
        try:
            date_obj = datetime.strptime(date_string, date_format)
            formatted_date = date_obj.strftime("%d.%m.%Y")
            break
        except ValueError:
            continue
    
    if formatted_date is None:
        return "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã."
    else:
        return formatted_date

#—Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
async def cur_date():
    current_date = datetime.now()
    formatted_date = current_date.strftime("%d.%m.%Y %H:%M")
    return formatted_date

#–≤—ã–¥–∞—á–∞ –±–∞–Ω–∞
async def ban_member(client, chat_id, user_id, reason='–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã.'):
    try:
        await client.ban_chat_member(chat_id, user_id)
        await client.send_message(chat_id, f"[–ù–∞—à –¥—Ä—É–≥](tg://user?id={user_id})\n–ë—ã–ª –æ—Ç—Å—Ç—Ä–∞–Ω—ë–Ω —Å —É—á—ë—Ç–æ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ:\n{reason}")
    except UserAdminInvalid as e:
        print(f"ERROR: {e}")
        await client.send_message(chat_id, f"[–ê–¥–º–∏–Ω](tg://user?id={user_id}) —Ç–≤–æ—è –≤–ª–∞—Å—Ç—å –æ—â—É—â–∞–µ—Ç—Å—è! üòé")
    except BadRequest as e:
        print(f"ERROR: {e}")
        await client.send_message(chat_id, f"–ù–µ –º–æ–≥—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –∑–∞–¥–∏—Ä—É [–í–∏–Ω–æ–≤–Ω–∏–∫–∞](tg://user?id={user_id})! üò†")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def unban_member(client, chat_id, user_id, reason=''):
    await client.unban_chat_member(chat_id, user_id)
    await client.send_message(chat_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω üòé" + f"\n\n–ü–æ –ø—Ä–∏—á–∏–Ω–µ:\n{reason}" if reason != '' else "")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–¥–∞—á–∏ –º—É—Ç–∞ –Ω–∞ –≤—Ä–µ–º—è (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
async def mute_user(client, chat_id, user_id, duration):
    permissions = types.ChatPermissions(
        can_send_messages=False,
        can_send_media_messages=False,
        can_send_polls=False,
        can_send_other_messages=False,
        can_add_web_page_previews=False,
        can_change_info=False,
        can_invite_users=False,
        can_pin_messages=False
    )
    until_date = datetime.now() + timedelta(seconds=duration)
    await client.restrict_chat_member(chat_id, user_id, until_date=until_date, permissions=permissions)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–Ω—è—Ç–∏—è –º—É—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def unmute_user(client, chat_id, user_id):
    permissions = types.ChatPermissions(
        can_send_messages=True,
        can_send_media_messages=True,
        can_send_polls=False,
        can_send_other_messages=True,
        can_add_web_page_previews=False,
        can_change_info=False,
        can_invite_users=True,
        can_pin_messages=False
    )
    await client.restrict_chat_member(chat_id, user_id, permissions=permissions)

async def upd_cfg(cfg):
    with open('config.ini', 'w') as configfile:
        cfg.write(configfile)

async def get_admin_members(chat_id):
    admin_members = []
    owner = []

    async for member in app.get_chat_members(chat_id):
        if member.status == ChatMemberStatus.ADMINISTRATOR:
            admin_members.append(member)
        elif member.status == ChatMemberStatus.OWNER:
            owner.append(member)
    return admin_members, owner

async def check_banwords(client, msg):
    user_id = msg.from_user.id
    chat_id = msg.chat.id

    with open('banwords.txt', 'r', encoding='utf-8') as words:
        words = words.readlines()
        for word in words:
            if msg.text.lower() == word.replace('\n', ''):
                await mute_user(client, chat_id, user_id, 500)
                await msg.reply_text('–¢–≤–æ–π —Ä–æ—Ç–∏–∫ —Å–æ–∑–¥–∞–Ω –¥–ª—è –ª—É—á—à–µ–≥–æ üòò')

async def check_amd(chat_id, user_id):
    admins, owner = await get_admin_members(chat_id)

    for admin in admins:
        if user_id == admin.user.id:
            return True
    if user_id == owner[0].user.id:
        return True
    
    return False

# ___       __   _______   ___       ________  ________  _____ ______   _______      
#|\  \     |\  \|\  ___ \ |\  \     |\   ____\|\   __  \|\   _ \  _   \|\  ___ \     
#\ \  \    \ \  \ \   __/|\ \  \    \ \  \___|\ \  \|\  \ \  \\\__\ \  \ \   __/|    
# \ \  \  __\ \  \ \  \_|/_\ \  \    \ \  \    \ \  \\\  \ \  \\|__| \  \ \  \_|/__  
#  \ \  \|\__\_\  \ \  \_|\ \ \  \____\ \  \____\ \  \\\  \ \  \    \ \  \ \  \_|\ \ 
#   \ \____________\ \_______\ \_______\ \_______\ \_______\ \__\    \ \__\ \_______\
#    \|____________|\|_______|\|_______|\|_______|\|_______|\|__|     \|__|\|_______|
                                                                                                                                       
@app.on_message(filters.new_chat_members)
async def greet_new_members(client, msg):
    user = MAIN.get_user_data(msg.from_user.id)
    if msg.from_user.is_bot:
        return
    if user:
        await msg.reply_text(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è –≤ <b>{msg.chat.title}</b>!\n–ö–∞–∂–µ—Ç—Å—è —è —Ç–µ–±—è –≤–∏–¥–µ–ª —Ä–∞–Ω—å—à–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ, —Å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º^^\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å <a href='{rules}'>–ø—Ä–∞–≤–∏–ª–∞–º–∏ —á–∞—Ç–∞</a> ^^")
    else:
        await msg.reply_text(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è –≤ <b>{msg.chat.title}</b>!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å <a href='{rules}'>–ø—Ä–∞–≤–∏–ª–∞–º–∏ —á–∞—Ç–∞</a> ^^")

#  _____ ______   ________  ___  ________           ___       ________  ________  ________   
# |\   _ \  _   \|\   __  \|\  \|\   ___  \        |\  \     |\   __  \|\   __  \|\   __  \  
# \ \  \\\__\ \  \ \  \|\  \ \  \ \  \\ \  \       \ \  \    \ \  \|\  \ \  \|\  \ \  \|\  \ 
#  \ \  \\|__| \  \ \   __  \ \  \ \  \\ \  \       \ \  \    \ \  \\\  \ \  \\\  \ \   ____\
#   \ \  \    \ \  \ \  \ \  \ \  \ \  \\ \  \       \ \  \____\ \  \\\  \ \  \\\  \ \  \___|
#    \ \__\    \ \__\ \__\ \__\ \__\ \__\\ \__\       \ \_______\ \_______\ \_______\ \__\   
#     \|__|     \|__|\|__|\|__|\|__|\|__| \|__|        \|_______|\|_______|\|_______|\|__|                                                                           
@app.on_message(filters.group)
async def main_group(client, msg):

    print(msg.text)

    if not msg or msg.from_user.is_bot:
        return

    chat_id = msg.chat.id
    cmd = msg.text.lower().split(" ")
    user = MAIN.get_user_data(msg.from_user.id)
    if not user:
        MAIN.register(
            id=msg.from_user.id, 
            nick=msg.from_user.username, 
            name=msg.from_user.first_name + "" if not msg.from_user.last_name else msg.from_user.last_name,
            bdate = "", 
            jdate = await cur_date(),
        )


    if await check_amd(chat_id, msg.from_user.id):
        if cmd[0] in ['/set', 'set', '—Å–µ—Ç'] and len(cmd) >= 2:
            if cmd[1] in ['td', "mutetime", "–º—É—Ç"]:
                    if cmd[2].isdigit():
                        global mute_delay
                        mute_delay = int(cmd[2]) * 60
                        await client.send_message(chat_id, f"–¢–µ–ø–µ—Ä—å –±–æ–ª—Ç—É–Ω—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Ä–æ—Ç–∏–∫–æ–º {mute_delay//60} –º–∏–Ω—É—Ç üòà")
                    else:
                        await client.send_message(chat_id, "–•–æ–∑—è–∏–Ω! –Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, –Ω–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö! (–∫ –ø—Ä–∏–º–µ—Ä—É 5 –º–∏–Ω—É—Ç)")
            elif cmd[1] in ["devchat", "–∑–∞–∫—É–ª–∏—Å—å–µ"]:
                    cfg.set('SETTING', 'dev', str(msg.chat.id))
                    await msg.reply_text("–û—Ç–ª–∏—á–Ω–æ! –Ø –∑–∞–ø–æ–º–Ω–∏–ª —á–∞—Ç–∏–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤!")
                    await upd_cfg(cfg)
            elif cmd[1] in ["mainchat", "–æ—Å–Ω–æ–≤–∞"]:
                    cfg.set('SETTING', 'main', str(msg.chat.id))
                    await msg.reply_text("–•–æ—Ä–æ—à–æ! –Ø –∑–∞–ø–æ–º–Ω–∏–ª —á–∞—Ç–∏–∫ –°–æ–æ–±—â–µ—Å—Ç–≤–∞")
                    await upd_cfg(cfg)
        elif cmd[0] in ['id', "–∏–¥"]:
                await client.send_message(chat_id, f"–í–∞—à –∞–π–¥–∏ - <code>{msg.from_user.id}</code>")
                await client.send_message(chat_id, f"–ß–∞—Ç –∞–π–¥–∏ - <code>{msg.chat.id}</code>")           
        elif cmd[0] in ['ban', "–±–∞–Ω"]:
                if len(cmd) >= 1:
                    reason = " ".join(cmd[1:])
                else:
                    reason = False
                if msg.reply_to_message.from_user:
                    if reason:
                        await ban_member(client, chat_id, msg.reply_to_message.from_user.id, reason=reason)
                    else:
                        await ban_member(client, chat_id, msg.reply_to_message.from_user.id)
                else:
                    await client.send_message(chat_id, "–ß—Ç–æ–±—ã –≤—ã–≥–Ω–∞—Ç—å –ø–ª–æ—Ö–∏—à–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
        elif cmd[0] in ['unban', '–∞–Ω–±–∞–Ω']:
                if len(cmd) >= 1:
                    reason = " ".join(cmd[1:])
                else:
                    reason = False
                if msg.reply_to_message.from_user:
                    if reason:
                        await unban_member(client, chat_id, msg.reply_to_message.from_user.id, reason=reason)
                    else:
                        await unban_member(client, chat_id, msg.reply_to_message.from_user.id)
                else:
                    await client.send_message(chat_id, "–ß—Ç–æ–±—ã –ø—Ä–æ—Å—Ç–∏—Ç—å —Å–æ–ª–Ω—ã—à–∫—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
        elif cmd[0] in ["–º—É—Ç", 'mute']:
                if msg.reply_to_message.from_user:
                    if len(cmd) == 2:
                        if cmd[1].isdigit():
                            mute_d = int(cmd[1])
                            await mute_user(client, chat_id, msg.reply_to_message.from_user.id, mute_d*60)
                            await msg.reply_text(f"[–≠—Ç–æ—Ç –ó–∞–π–∫–∞](tg://user?id={msg.reply_to_message.from_user.id}) –ø–æ–º–æ–ª–∏—á–∏—Ç {round(mute_d, 1)} –º–∏–Ω—É—Ç\n–ù–µ –º–µ—à–∞–π—Ç–µ –∑–∞–π–∫–µ –¥—É–º–∞—Ç—å –Ω–∞–¥ –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º)")
                        else:
                            await msg.reply_text("–£–∫–∞–∑–∞–Ω–æ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—É—Ç–∞! (–¶–µ–ª–æ–µ —á–∏—Å–ª–æ –≤ –º–∏–Ω—É—Ç–∞—Ö)")
                    else:
                        await mute_user(client, chat_id, msg.reply_to_message.from_user.id, mute_delay)
                        await msg.reply_text(f"–£ [–õ–∏—Å–µ–Ω–∫–∞](tg://user?id={msg.reply_to_message.from_user.id}) —Ä–æ—Ç–∏–∫ –±—É–¥–µ—Ç –∑–∞–Ω—è—Ç {round(mute_delay/60, 1)} –º–∏–Ω—É—Ç\n–ù–µ –º–µ—à–∞–π—Ç–µ –ª–∏—Å–µ–Ω–∫—É –¥—É–º–∞—Ç—å –Ω–∞–¥ –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º)")
                else:
                    await msg.reply_text("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —á—å–µ —Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ–±—ã –æ–Ω –ø–æ–¥—É–º–∞–ª –Ω–∞–¥ –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º! >.<")
        elif cmd[0] in ["–≥–æ–≤–æ—Ä–∏", 'speak', '—Å–ø–∏–∫', '–∞–Ω–º—É—Ç']:
            if msg.reply_to_message.from_user:
                await unmute_user(client, chat_id, msg.reply_to_message.from_user.id)
                await msg.reply_text(f"–ö–ª—è–ø –≤—ã–Ω—É—Ç, –Ω–æ –º—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—åüòö")
            else:
                await msg.reply_text("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —á—å–µ —Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–Ω–º—É—Ç–∞!üå∏")
    
    if cmd[0] in ["/–∞–¥–º–∏–Ω—ã", '!–∞–¥–º–∏–Ω—ã']:
        admin_members, owner = await get_admin_members(chat_id)
        text = "\n–ì–ª–∞–≤–∞üå∏\n"
        for own in owner:
            us = f"{own.user.first_name} {own.user.last_name if own.user.last_name else ''}"
            text += f"[{us}](tg://user?id={own.user.id})\n"
        text += "\n–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –ß–∞—Ç–∞üå∏\n"
        for admin in admin_members:
            us = f"{admin.user.first_name} {admin.user.last_name if admin.user.last_name else ''}"
            text += f"[{us}](tg://user?id={admin.user.id})\n"
        await client.send_message(chat_id, text)
    elif cmd[0] in ["—Ä–∞–ø–æ—Ä—Ç", "—Ä–µ–ø–æ—Ä—Ç", "report", 'raport'] and str(msg.chat.id) == cfg.get('SETTING', 'main'):
            if msg.reply_to_message:
                try:
                    if global_cfg[msg.reply_to_message.from_user.id]['rt'] >= 1:
                        pass
                except:
                    global_cfg[msg.reply_to_message.from_user.id] = {"rt": 1}

                inline_keyboard = InlineKeyboardMarkup([
                        [InlineKeyboardButton("–ë–∞–Ω", callback_data=f"ban_{msg.reply_to_message.from_user.id}")],
                        [InlineKeyboardButton("–ò–≥–Ω–æ—Ä", callback_data=f"denied_")]
                ])
                text = f'''
–ü–æ—Å—Ç—É–ø–∏–ª —Ä–µ–ø–æ—Ä—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µüìõ:
<code>{msg.reply_to_message.text}</code>

[–í–∏–Ω–æ–≤–Ω–∏–∫](tg://user?id={msg.reply_to_message.from_user.id})

[–ö—Ç–æ –∂–∞–ª—É–µ—Ç—Å—è](tg://user?id={msg.from_user.id})
'''
                await client.send_message(cfg.get('SETTING', 'dev'), text, reply_markup=inline_keyboard)
                await client.send_message(chat_id, '–í–∏–Ω–æ–≤–Ω–∏–∫ —É–∂–µ –≤ —Ü–µ–Ω—Ç—Ä–µ –≤–Ω–∏–º–∞–Ω–∏—è –º–æ–¥–µ—Ä–æ–≤!)) üìõ')
            else:
                await client.send_message(chat_id, "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —á—å–µ –ª–∏–±–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–ø–æ—Ä—Ç–∞üìõ")
    elif cmd[0] == '–ø–∏–Ω–≥':
        await msg.reply_text('–ü–û–ù–ì!üå∏')

    await check_banwords(client, msg)

    print(msg.text, msg.from_user.first_name)

@app.on_message(filters.private)
async def main_private(client, msg):
    if msg.from_user.is_bot:
        return
    
    chat_id = msg.chat.id
    cmd = msg.text.lower().split(" ")
    if cmd[0] in ['login', '–ª–æ–≥–∏–Ω'] and len(cmd) == 2:
        if cmd[1] == cfg.get('SETTING', 'dev_pass'):
            cfg.set('SETTING', 'developer', str(msg.from_user.id))
            await upd_cfg(cfg)
            await client.send_message(chat_id, f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å –°–æ–∑–¥–∞—Ç–µ–ª—å!")
        else:
            try:
                if global_cfg[msg.from_user.id]['dev_try'] != 0:
                    global_cfg[msg.from_user.id]['dev_try'] -= 1
            except:
                global_cfg[msg.from_user.id] = {"dev_try": 2}
            if global_cfg[msg.from_user.id]['dev_try']:
                await client.send_message(chat_id, f"–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!!!\n –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫ -{global_cfg[msg.from_user.id]['dev_try']}")
    if str(msg.from_user) == cfg.get('SETTING', 'developer'):
        if cmd[0] in ["rate", "—Ä–µ–π—Ç"] and len(cmd) == 2:
            MAIN.update_user(msg.from_user.id, {"rate": int(cmd[1])})
            await msg.reply_text("–£—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω–µ–Ω!")

#  ________  ________  ___       ___       ________  ________  ________  ___  __    ________      
# |\   ____\|\   __  \|\  \     |\  \     |\   __  \|\   __  \|\   ____\|\  \|\  \ |\   ____\     
# \ \  \___|\ \  \|\  \ \  \    \ \  \    \ \  \|\ /\ \  \|\  \ \  \___|\ \  \/  /|\ \  \___|_    
#  \ \  \    \ \   __  \ \  \    \ \  \    \ \   __  \ \   __  \ \  \    \ \   ___  \ \_____  \   
#   \ \  \____\ \  \ \  \ \  \____\ \  \____\ \  \|\  \ \  \ \  \ \  \____\ \  \\ \  \|____|\  \  
#    \ \_______\ \__\ \__\ \_______\ \_______\ \_______\ \__\ \__\ \_______\ \__\\ \__\____\_\  \ 
#     \|_______|\|__|\|__|\|_______|\|_______|\|_______|\|__|\|__|\|_______|\|__| \|__|\_________\
#                                                                                     \|_________|
@app.on_callback_query()
async def callback_query(client, query):
    data = query.data.split("_")
    if data[0] == "ban":
        text_data = query.message.text + '\n\n –Æ–ó–ï–† –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ùüçë'
        await query.message.edit_text(text_data)
        await ban_member(client, int(cfg.get('SETTING', 'main')), int(data[1]), '–†–∞–ø–æ—Ä—Ç')

    elif data[0] == "denied":
        text_data = query.message.text + '\n\n –†–ê–ü–û–†–¢ –û–¢–ö–õ–û–ù–ï–ùü•∞'
        await query.message.edit_text(text_data)                                                          


if __name__ == "__main__":                                                               
    print("Start bot!")
    try:
        thread = threading.Thread(target=clear_spam)
        thread.start()
        app.run()
    except KeyboardInterrupt as e:
        print(e)
else:
    print("! NOT IMPORTABLE MAIN FILE !")
    quit()